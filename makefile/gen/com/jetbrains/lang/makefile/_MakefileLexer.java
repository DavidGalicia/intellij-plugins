// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MakefileLexer.flex

package com.jetbrains.lang.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.lang.makefile.psi.MakefileTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.jetbrains.lang.makefile.psi.MakefileTypes.*;


public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SQSTRING = 2;
  public static final int DQSTRING = 4;
  public static final int DEFINE = 6;
  public static final int LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4,  5,  6,  7,  8, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\11\1\5"+
    "\1\15\1\16\1\17\13\11\1\20\1\21\1\11\1\22"+
    "\1\11\1\5\1\23\2\11\1\24\1\11\1\25\1\26"+
    "\2\11\1\27\6\11\1\30\1\11\1\31\5\11\1\32"+
    "\3\11\1\33\3\11\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\11\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\2\11\1\64\1\65\1\66"+
    "\1\11\6\0\1\3\44\0\1\11\12\0\1\11\4\0"+
    "\1\11\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0"+
    "\14\11\16\0\5\11\7\0\1\11\1\0\1\11\201\0"+
    "\5\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0"+
    "\1\11\1\0\3\11\1\0\1\11\1\0\24\11\1\0"+
    "\123\11\1\0\213\11\10\0\246\11\1\0\46\11\2\0"+
    "\1\11\6\0\51\11\107\0\33\11\4\0\4\11\55\0"+
    "\53\11\43\0\2\11\1\0\143\11\1\0\1\11\17\0"+
    "\2\11\7\0\2\11\12\0\3\11\2\0\1\11\20\0"+
    "\1\11\1\0\36\11\35\0\131\11\13\0\1\11\30\0"+
    "\41\11\11\0\2\11\4\0\1\11\5\0\26\11\4\0"+
    "\1\11\11\0\1\11\3\0\1\11\27\0\31\11\7\0"+
    "\13\11\65\0\25\11\1\0\10\11\106\0\66\11\3\0"+
    "\1\11\22\0\1\11\7\0\12\11\17\0\20\11\4\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\1\11\3\0\4\11\3\0\1\11\20\0\1\11\15\0"+
    "\2\11\1\0\3\11\16\0\2\11\12\0\1\11\10\0"+
    "\6\11\4\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\37\0\4\11\1\0"+
    "\1\11\23\0\3\11\20\0\11\11\1\0\3\11\1\0"+
    "\26\11\1\0\7\11\1\0\2\11\1\0\5\11\3\0"+
    "\1\11\22\0\1\11\17\0\2\11\27\0\1\11\13\0"+
    "\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\5\11\3\0\1\11\36\0\2\11\1\0"+
    "\3\11\17\0\1\11\21\0\1\11\1\0\6\11\3\0"+
    "\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0"+
    "\2\11\3\0\2\11\3\0\3\11\3\0\14\11\26\0"+
    "\1\11\64\0\10\11\1\0\3\11\1\0\27\11\1\0"+
    "\20\11\3\0\1\11\32\0\3\11\5\0\2\11\36\0"+
    "\1\11\4\0\10\11\1\0\3\11\1\0\27\11\1\0"+
    "\12\11\1\0\5\11\3\0\1\11\40\0\1\11\1\0"+
    "\2\11\17\0\2\11\22\0\10\11\1\0\3\11\1\0"+
    "\51\11\2\0\1\11\20\0\1\11\5\0\3\11\10\0"+
    "\3\11\30\0\6\11\5\0\22\11\3\0\30\11\1\0"+
    "\11\11\1\0\1\11\2\0\7\11\72\0\60\11\1\0"+
    "\2\11\14\0\7\11\72\0\2\11\1\0\1\11\1\0"+
    "\5\11\1\0\30\11\1\0\1\11\1\0\12\11\1\0"+
    "\2\11\11\0\1\11\2\0\5\11\1\0\1\11\25\0"+
    "\4\11\40\0\1\11\77\0\10\11\1\0\44\11\33\0"+
    "\5\11\163\0\53\11\24\0\1\11\20\0\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0"+
    "\15\11\14\0\1\11\21\0\46\11\1\0\1\11\5\0"+
    "\1\11\2\0\53\11\1\0\115\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0"+
    "\4\11\2\0\41\11\1\0\4\11\2\0\7\11\1\0"+
    "\1\11\1\0\4\11\2\0\17\11\1\0\71\11\1\0"+
    "\4\11\2\0\103\11\45\0\20\11\20\0\126\11\2\0"+
    "\6\11\3\0\u016c\11\2\0\21\11\1\0\32\11\5\0"+
    "\113\11\6\0\10\11\7\0\15\11\1\0\4\11\16\0"+
    "\22\11\16\0\22\11\16\0\15\11\1\0\3\11\17\0"+
    "\64\11\43\0\1\11\4\0\1\11\103\0\131\11\7\0"+
    "\5\11\2\0\42\11\1\0\1\11\5\0\106\11\12\0"+
    "\37\11\61\0\36\11\2\0\5\11\13\0\54\11\4\0"+
    "\32\11\66\0\27\11\11\0\65\11\122\0\1\11\135\0"+
    "\57\11\21\0\7\11\67\0\36\11\15\0\2\11\12\0"+
    "\54\11\32\0\44\11\51\0\3\11\12\0\44\11\2\0"+
    "\11\11\7\0\53\11\2\0\3\11\51\0\4\11\1\0"+
    "\6\11\1\0\2\11\3\0\1\11\5\0\300\11\100\0"+
    "\26\11\2\0\6\11\2\0\46\11\2\0\6\11\2\0"+
    "\10\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\37\11\2\0\65\11\1\0\7\11\1\0\1\11\3\0"+
    "\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0"+
    "\15\11\5\0\3\11\1\0\7\11\53\0\2\3\107\0"+
    "\1\11\15\0\1\11\20\0\15\11\145\0\1\11\4\0"+
    "\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0"+
    "\13\11\2\0\4\11\5\0\5\11\4\0\1\11\64\0"+
    "\2\11\u017b\0\57\11\1\0\57\11\1\0\205\11\6\0"+
    "\4\11\3\0\2\11\14\0\46\11\1\0\1\11\5\0"+
    "\1\11\2\0\70\11\7\0\1\11\20\0\27\11\11\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\120\0"+
    "\1\11\325\0\2\11\52\0\5\11\5\0\2\11\4\0"+
    "\126\11\6\0\3\11\1\0\132\11\1\0\4\11\5\0"+
    "\53\11\1\0\136\11\21\0\33\11\65\0\306\11\112\0"+
    "\360\11\20\0\215\11\103\0\56\11\2\0\15\11\3\0"+
    "\20\11\12\0\2\11\24\0\57\11\20\0\37\11\2\0"+
    "\106\11\61\0\11\11\2\0\147\11\2\0\65\11\2\0"+
    "\5\11\60\0\13\11\1\0\3\11\1\0\4\11\1\0"+
    "\27\11\35\0\64\11\16\0\62\11\76\0\6\11\3\0"+
    "\1\11\1\0\2\11\13\0\34\11\12\0\27\11\31\0"+
    "\35\11\7\0\57\11\34\0\1\11\20\0\5\11\1\0"+
    "\12\11\12\0\5\11\1\0\51\11\27\0\3\11\1\0"+
    "\10\11\24\0\27\11\3\0\1\11\3\0\62\11\1\0"+
    "\1\11\3\0\2\11\2\0\5\11\2\0\1\11\1\0"+
    "\1\11\30\0\3\11\2\0\13\11\7\0\3\11\14\0"+
    "\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0"+
    "\7\11\1\0\53\11\1\0\14\11\10\0\163\11\35\0"+
    "\244\11\14\0\27\11\4\0\61\11\4\0\u0100\3\156\11"+
    "\2\0\152\11\46\0\7\11\14\0\5\11\5\0\1\11"+
    "\1\0\12\11\1\0\15\11\1\0\5\11\1\0\1\11"+
    "\1\0\2\11\1\0\2\11\1\0\154\11\41\0\153\11"+
    "\22\0\100\11\2\0\66\11\50\0\14\11\164\0\5\11"+
    "\1\0\207\11\44\0\32\11\6\0\32\11\13\0\131\11"+
    "\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11"+
    "\43\0\14\11\1\0\32\11\1\0\23\11\1\0\2\11"+
    "\1\0\17\11\2\0\16\11\42\0\173\11\205\0\35\11"+
    "\3\0\61\11\57\0\40\11\15\0\24\11\1\0\10\11"+
    "\6\0\46\11\12\0\36\11\2\0\44\11\4\0\10\11"+
    "\60\0\236\11\22\0\44\11\4\0\44\11\4\0\50\11"+
    "\10\0\64\11\234\0\67\11\11\0\26\11\12\0\10\11"+
    "\230\0\6\11\2\0\1\11\1\0\54\11\1\0\2\11"+
    "\3\0\1\11\2\0\27\11\12\0\27\11\11\0\37\11"+
    "\101\0\23\11\1\0\2\11\12\0\26\11\12\0\32\11"+
    "\106\0\70\11\6\0\2\11\100\0\1\11\17\0\4\11"+
    "\1\0\3\11\1\0\35\11\52\0\35\11\3\0\35\11"+
    "\43\0\10\11\1\0\34\11\33\0\66\11\12\0\26\11"+
    "\12\0\23\11\15\0\22\11\156\0\111\11\67\0\63\11"+
    "\15\0\63\11\15\0\44\11\334\0\35\11\12\0\1\11"+
    "\10\0\26\11\232\0\27\11\14\0\65\11\113\0\55\11"+
    "\40\0\31\11\32\0\44\11\35\0\1\11\13\0\43\11"+
    "\3\0\1\11\14\0\60\11\16\0\4\11\25\0\1\11"+
    "\1\0\1\11\43\0\22\11\1\0\31\11\124\0\7\11"+
    "\1\0\1\11\1\0\4\11\1\0\17\11\1\0\12\11"+
    "\7\0\57\11\46\0\10\11\2\0\2\11\2\0\26\11"+
    "\1\0\7\11\1\0\2\11\1\0\5\11\3\0\1\11"+
    "\22\0\1\11\14\0\5\11\236\0\65\11\22\0\4\11"+
    "\24\0\1\11\40\0\60\11\24\0\2\11\1\0\1\11"+
    "\270\0\57\11\51\0\4\11\44\0\60\11\24\0\1\11"+
    "\73\0\53\11\15\0\1\11\107\0\33\11\345\0\54\11"+
    "\164\0\100\11\37\0\1\11\240\0\10\11\2\0\47\11"+
    "\20\0\1\11\1\0\1\11\34\0\1\11\12\0\50\11"+
    "\7\0\1\11\25\0\1\11\13\0\56\11\23\0\1\11"+
    "\42\0\71\11\7\0\11\11\1\0\45\11\21\0\1\11"+
    "\61\0\36\11\160\0\7\11\1\0\2\11\1\0\46\11"+
    "\25\0\1\11\31\0\6\11\1\0\2\11\1\0\40\11"+
    "\16\0\1\11\u0147\0\23\11\15\0\232\11\346\0\304\11"+
    "\274\0\57\11\321\0\107\11\271\0\71\11\7\0\37\11"+
    "\161\0\36\11\22\0\60\11\20\0\4\11\37\0\25\11"+
    "\5\0\23\11\260\0\100\11\200\0\113\11\5\0\1\11"+
    "\102\0\15\11\100\0\2\11\1\0\1\11\34\0\370\11"+
    "\10\0\363\11\15\0\37\11\61\0\3\11\21\0\4\11"+
    "\10\0\u018c\11\4\0\153\11\5\0\15\11\3\0\11\11"+
    "\7\0\12\11\146\0\125\11\1\0\107\11\1\0\2\11"+
    "\2\0\1\11\2\0\2\11\2\0\4\11\1\0\14\11"+
    "\1\0\1\11\1\0\7\11\1\0\101\11\1\0\4\11"+
    "\2\0\10\11\1\0\7\11\1\0\34\11\1\0\4\11"+
    "\1\0\5\11\1\0\1\11\3\0\7\11\1\0\u0154\11"+
    "\2\0\31\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11"+
    "\1\0\37\11\1\0\31\11\1\0\10\11\64\0\55\11"+
    "\12\0\7\11\20\0\1\11\u0171\0\54\11\24\0\305\11"+
    "\73\0\104\11\7\0\1\11\264\0\4\11\1\0\33\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\12\11"+
    "\1\0\4\11\1\0\1\11\1\0\1\11\6\0\1\11"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11"+
    "\1\0\1\11\2\0\4\11\1\0\7\11\1\0\4\11"+
    "\1\0\4\11\1\0\1\11\1\0\12\11\1\0\21\11"+
    "\5\0\3\11\1\0\5\11\1\0\21\11\104\0\327\11"+
    "\51\0\65\11\13\0\336\11\2\0\u0182\11\16\0\u0131\11"+
    "\37\0\36\11\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\3\3\1\2\2\3\1\4\1\5"+
    "\1\6\1\5\3\7\1\10\1\7\1\11\1\12\1\13"+
    "\1\14\1\7\1\15\1\16\1\17\1\7\1\20\22\7"+
    "\1\21\1\22\1\23\2\7\1\24\1\25\2\7\1\26"+
    "\1\27\1\5\1\2\1\30\1\2\4\0\2\2\1\30"+
    "\1\2\3\0\1\7\1\0\1\31\1\32\17\7\1\33"+
    "\4\7\1\33\17\7\1\0\2\7\1\0\2\30\1\0"+
    "\1\34\3\7\1\33\43\7\1\34\2\7\1\0\4\7"+
    "\1\35\7\7\1\36\16\7\1\33\2\7\1\0\4\7"+
    "\1\37\4\7\1\40\1\7\1\41\10\7\1\42\4\7"+
    "\1\43\1\0\2\7\1\44\1\33\1\7\1\45\7\7"+
    "\1\46\1\0\1\7\1\47\1\7\1\50\2\7\1\0"+
    "\1\7\1\51\1\52\1\53\5\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0226\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\u0226\0\u03a7\0\u0226\0\u03de\0\u0415\0\u0226"+
    "\0\u044c\0\u0226\0\u0483\0\u0226\0\u0226\0\u0226\0\u0226\0\u04ba"+
    "\0\u04f1\0\u0226\0\u0226\0\u0528\0\u0226\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0906\0\u0226"+
    "\0\u0226\0\u0226\0\u093d\0\u0974\0\u0226\0\u0226\0\u09ab\0\u09e2"+
    "\0\u0226\0\u0226\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0294\0\u0339"+
    "\0\u02cb\0\u0af5\0\u0b2c\0\u0226\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0226\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9"+
    "\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1"+
    "\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u0226\0\u1658\0\u168f\0\u16c6\0\u0483\0\u16fd\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u0483\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u0483\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u0483\0\u2184\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce"+
    "\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u0483"+
    "\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u0483\0\u271a\0\u0483\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u0483"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u0483\0\u29e5\0\u2a1c\0\u2a53"+
    "\0\u0483\0\u2a8a\0\u2ac1\0\u0483\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d"+
    "\0\u2bd4\0\u2c0b\0\u2c42\0\u0483\0\u2c79\0\u2cb0\0\u0483\0\u2ce7"+
    "\0\u0483\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u0483\0\u0483\0\u0483"+
    "\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\13\1\14\57\13\1\15\1\16\2\13\1\17\2\15"+
    "\1\20\7\15\1\21\3\15\1\22\43\15\1\23\1\24"+
    "\1\25\1\23\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\33\1\41\1\42"+
    "\1\43\10\33\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\33\1\55\1\56\1\57\1\33"+
    "\1\60\1\61\1\62\1\33\1\63\1\64\1\33\1\65"+
    "\1\66\1\67\1\33\1\70\1\71\1\72\1\23\1\24"+
    "\1\25\1\23\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\33\1\41\1\42"+
    "\1\43\1\73\7\33\1\44\1\45\1\46\1\47\1\50"+
    "\1\74\1\52\1\53\1\54\1\33\1\55\1\56\1\57"+
    "\1\33\1\60\1\61\1\62\1\33\1\63\1\64\1\33"+
    "\1\65\1\66\1\67\1\33\1\70\1\71\1\72\1\23"+
    "\1\24\1\25\1\23\1\26\1\27\1\75\1\31\1\32"+
    "\1\33\1\30\1\35\1\36\1\37\1\40\1\33\1\41"+
    "\1\42\1\43\10\33\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\33\1\55\1\56\1\57"+
    "\1\33\1\60\1\61\1\62\1\33\1\63\1\64\1\33"+
    "\1\65\1\66\1\67\1\33\1\70\1\71\1\72\1\23"+
    "\1\24\1\25\1\23\1\26\1\27\1\75\1\31\1\32"+
    "\1\33\1\30\1\35\1\36\1\37\1\40\1\33\1\41"+
    "\1\42\1\43\1\73\7\33\1\44\1\45\1\46\1\47"+
    "\1\50\1\74\1\52\1\53\1\54\1\33\1\55\1\56"+
    "\1\57\1\33\1\60\1\61\1\62\1\33\1\63\1\64"+
    "\1\33\1\65\1\66\1\67\1\33\1\70\1\71\1\72"+
    "\1\23\1\24\1\76\1\23\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\30\1\35\1\36\1\37\2\33\1\41"+
    "\1\42\1\43\10\33\1\44\1\45\4\33\1\77\22\33"+
    "\1\70\1\71\1\72\1\23\1\24\1\76\1\23\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\30\1\35\1\36"+
    "\1\37\2\33\1\41\1\42\1\43\1\100\7\33\1\44"+
    "\1\45\4\33\1\77\22\33\1\70\1\71\1\72\1\23"+
    "\1\24\1\25\1\23\1\26\1\27\1\101\1\14\1\32"+
    "\1\33\1\102\1\35\1\36\1\37\1\40\1\33\1\41"+
    "\1\42\1\43\10\33\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\33\1\55\1\56\1\57"+
    "\1\33\1\60\1\61\1\62\1\33\1\63\1\64\1\33"+
    "\1\65\1\66\1\67\1\33\1\70\1\71\1\72\1\23"+
    "\1\24\1\25\1\23\1\103\1\27\1\101\1\20\1\32"+
    "\1\33\1\102\1\35\1\36\1\37\1\40\1\33\1\41"+
    "\1\42\1\43\1\73\7\33\1\44\1\45\1\46\1\47"+
    "\1\50\1\74\1\52\1\53\1\54\1\33\1\55\1\56"+
    "\1\57\1\33\1\60\1\61\1\62\1\33\1\63\1\64"+
    "\1\33\1\65\1\66\1\67\1\33\1\70\1\71\1\72"+
    "\67\0\2\104\1\0\4\104\1\105\23\104\1\106\33\104"+
    "\1\0\1\107\2\0\1\107\12\0\1\110\50\0\1\107"+
    "\2\0\1\111\2\0\1\112\7\0\1\110\47\0\2\113"+
    "\1\114\4\113\1\115\23\113\1\116\33\113\31\0\1\117"+
    "\35\0\2\120\1\0\1\120\1\0\16\120\1\0\43\120"+
    "\1\0\1\24\71\0\1\26\67\0\1\33\3\0\1\33"+
    "\4\0\2\33\2\0\1\43\10\33\1\121\1\0\27\33"+
    "\12\0\1\31\64\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\27\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\10\33"+
    "\1\122\16\33\23\0\1\123\1\0\1\43\46\0\1\124"+
    "\3\0\1\125\1\33\3\0\2\33\3\0\1\33\12\0"+
    "\1\33\40\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\1\33\1\126\1\33\1\127\10\33"+
    "\1\130\12\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\1\131\26\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\1\132\26\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\10\33\1\133\16\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\12\33\1\134\1\33\1\135\3\33\1\136\3\33"+
    "\1\137\1\33\1\140\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\10\33\1\141\1\33"+
    "\1\142\2\33\1\143\11\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\23\33\1\144"+
    "\3\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\5\33\1\145\6\33\1\146\12\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\15\33\1\147\11\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\1\150"+
    "\26\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\15\33\1\151\11\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\20\33\1\152\3\33\1\153\2\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\1\154"+
    "\17\33\1\155\6\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\4\33\1\156\22\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\7\33\1\157\1\122\4\33\1\160\4\33"+
    "\1\161\1\162\3\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\14\33\1\163\12\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\1\164\15\33\1\165\10\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\1\166\7\33\1\167\4\33\1\170\11\33\3\0\2\120"+
    "\1\0\1\120\1\0\1\171\3\120\1\171\4\120\2\171"+
    "\3\120\1\33\7\171\1\172\1\120\27\171\3\120\5\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\4\33\1\173\3\33\1\133\16\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\14\33\1\174\12\33\3\0\2\120\1\0\1\120\1\0"+
    "\1\100\3\120\1\100\4\120\2\100\3\120\1\33\7\100"+
    "\1\175\1\120\27\100\3\120\4\0\1\103\2\0\1\112"+
    "\57\0\2\104\1\0\30\104\1\106\33\104\2\105\1\0"+
    "\30\105\1\176\33\105\33\104\1\106\33\104\2\112\1\114"+
    "\64\112\2\113\1\114\30\113\1\116\33\113\2\115\1\114"+
    "\30\115\1\177\33\115\2\113\1\104\30\113\1\116\33\113"+
    "\25\0\1\200\41\0\2\120\1\0\1\120\1\0\16\120"+
    "\1\201\43\120\7\0\1\33\3\0\2\33\3\0\1\33"+
    "\12\0\1\33\40\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\14\33\1\202\12\33\25\0"+
    "\1\43\45\0\1\124\2\0\1\124\67\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\21\33"+
    "\1\203\5\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\3\33\1\204\23\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\3\33\1\205\23\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\21\33\1\206"+
    "\5\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\12\33\1\207\14\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\20\33\1\205\6\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\21\33\1\210\5\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\3\33\1\211\23\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\20\33"+
    "\1\212\6\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\1\207\26\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\16\33\1\213\10\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\12\33\1\214\1\33"+
    "\1\215\3\33\1\150\6\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\1\216\26\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\20\33\1\217\6\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\10\33"+
    "\1\220\16\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\3\33\1\221\1\222\7\33"+
    "\1\223\12\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\2\33\1\224\2\33\1\225"+
    "\21\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\10\33\1\226\16\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\21\33\1\227\5\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\22\33\1\230\4\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\10\33\1\231\16\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\4\33"+
    "\1\232\22\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\22\33\1\233\4\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\10\33\1\234\16\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\1\235\26\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\4\33\1\132\22\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\20\33"+
    "\1\236\6\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\20\33\1\237\6\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\1\33\1\240\3\33\1\241\21\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\3\33\1\242\1\243\22\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\12\33\1\244"+
    "\14\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\1\245\26\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\20\33"+
    "\1\246\6\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\12\33\1\247\14\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\20\33\1\250\6\33\3\0\2\120\1\0\1\120"+
    "\1\0\1\171\3\120\1\171\4\120\2\171\3\120\1\251"+
    "\7\171\1\172\1\120\27\171\5\120\1\0\1\120\1\0"+
    "\2\120\1\171\3\120\2\171\3\120\1\171\2\120\1\201"+
    "\7\120\1\171\33\120\5\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\5\33\1\252\21\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\3\33\1\253\23\33\3\0\2\120\1\0"+
    "\1\120\1\0\2\120\1\100\3\120\2\100\3\120\1\100"+
    "\2\120\1\201\7\120\1\100\33\120\2\105\1\104\30\105"+
    "\1\176\33\105\2\115\1\104\30\115\1\177\33\115\24\0"+
    "\1\254\47\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\2\33\1\224\24\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\16\33\1\255\10\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\16\33\1\256\2\33"+
    "\1\257\5\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\4\33\1\260\22\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\12\33\1\205\14\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\4\33\1\261"+
    "\22\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\10\33\1\262\16\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\15\33\1\133\11\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\15\33\1\263\11\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\4\33\1\205\15\33\1\264\4\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\3\33\1\265\23\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\24\33\1\212"+
    "\2\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\4\33\1\266\22\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\12\33\1\267\14\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\4\33\1\270\22\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\17\33\1\271\7\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\3\33"+
    "\1\272\1\273\22\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\12\33\1\274\14\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\15\33\1\205\11\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\14\33"+
    "\1\205\12\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\22\33\1\275\4\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\3\33\1\51\23\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\6\33\1\147"+
    "\20\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\20\33\1\276\6\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\21\33\1\277\5\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\24\33\1\300\2\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\12\33\1\203\14\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\22\33"+
    "\1\205\4\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\10\33\1\301\16\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\21\33\1\236\5\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\5\33\1\302"+
    "\21\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\4\33\1\303\22\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\26\33\1\304\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\23\33\1\267\3\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\22\33\1\305\4\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\14\33\1\306"+
    "\12\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\3\33\1\307\23\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\3\33\1\310\23\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\10\33\1\311\16\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\4\33\1\312\22\33\32\0\1\313\44\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\1\314\26\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\20\33\1\315\6\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\23\33\1\316\3\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\14\33"+
    "\1\317\12\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\5\33\1\320\21\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\20\33\1\321\6\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\4\33\1\322"+
    "\22\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\21\33\1\323\5\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\1\324\26\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\4\33\1\205\22\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\5\33\1\325\21\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\4\33\1\326"+
    "\22\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\17\33\1\327\7\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\23\33\1\330\3\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\25\33\1\331\1\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\20\33\1\332\6\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\23\33"+
    "\1\333\3\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\1\334\26\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\16\33\1\205\10\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\10\33\1\335\16\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\5\33\1\336\21\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\16\33"+
    "\1\337\10\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\7\33\1\340\17\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\10\33\1\341\16\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\2\33\1\342"+
    "\24\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\12\33\1\343\6\33\1\205\5\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\14\33\1\344\12\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\5\33"+
    "\1\345\21\33\33\0\1\346\43\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\22\33\1\347"+
    "\4\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\4\33\1\241\22\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\5\33\1\241\21\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\1\350\26\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\22\33\1\351\4\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\20\33\1\352"+
    "\6\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\22\33\1\353\4\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\2\33\1\347\24\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\5\33\1\354\21\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\3\33\1\355\23\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\15\33"+
    "\1\356\11\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\10\33\1\357\16\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\1\33\1\240\25\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\22\33\1\360"+
    "\4\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\26\33\1\205\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\10\33"+
    "\1\361\16\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\15\33\1\362\11\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\14\33\1\363\12\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\1\356\26\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\10\33\1\240\16\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\4\33"+
    "\1\364\22\33\30\0\1\365\46\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\7\33\1\205"+
    "\17\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\13\33\1\267\13\33\10\0\1\33"+
    "\3\0\1\33\4\0\1\366\1\33\3\0\10\33\1\121"+
    "\1\0\27\33\10\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\20\33\1\306\6\33\10\0"+
    "\1\33\3\0\1\33\4\0\2\33\3\0\10\33\1\121"+
    "\1\0\4\33\1\367\22\33\10\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\20\33\1\130"+
    "\6\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\3\33\1\370\23\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\4\33\1\371\22\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\14\33\1\372\12\33"+
    "\10\0\1\33\3\0\1\33\4\0\2\33\3\0\10\33"+
    "\1\121\1\0\20\33\1\373\6\33\10\0\1\33\3\0"+
    "\1\33\4\0\2\33\3\0\10\33\1\121\1\0\6\33"+
    "\1\205\20\33\33\0\1\374\43\0\1\33\3\0\1\33"+
    "\4\0\2\33\3\0\10\33\1\121\1\0\15\33\1\375"+
    "\11\33\10\0\1\33\3\0\1\33\4\0\2\33\3\0"+
    "\10\33\1\121\1\0\4\33\1\376\22\33\10\0\1\33"+
    "\3\0\1\33\4\0\2\33\3\0\10\33\1\121\1\0"+
    "\4\33\1\377\22\33\10\0\1\33\3\0\1\33\4\0"+
    "\2\33\3\0\10\33\1\121\1\0\22\33\1\u0100\4\33"+
    "\34\0\1\u0101\42\0\1\33\3\0\1\33\4\0\2\33"+
    "\3\0\10\33\1\121\1\0\23\33\1\236\3\33\30\0"+
    "\1\u0102\67\0\1\u0103\67\0\1\u0104\71\0\1\u0105\35\0"+
    "\1\u0105\2\0\1\u0105\15\0\1\u0106\44\0\2\u0106\1\0"+
    "\64\u0106";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12100];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\1\1\1\11\5\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\4\11\2\1\2\11"+
    "\1\1\1\11\22\1\3\11\2\1\2\11\2\1\2\11"+
    "\4\1\4\0\1\1\1\11\2\1\3\0\1\1\1\0"+
    "\1\1\1\11\44\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\11\52\1\1\0\36\1\1\0\32\1\1\0\16\1"+
    "\1\0\6\1\1\0\4\1\5\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private static char getRecipePrefix(String variable) {
    final var index = variable.indexOf('=');
    assert index != -1;

    final var value = StringUtil.trimLeading(variable.substring(index + 1, variable.length()), ' ');
    if (value.startsWith("\\t") || value.isEmpty()) {
      return '\t';
    }

    return value.charAt(0);
  }

  private char recipePrefix = '\t';

  private int lastState = YYINITIAL;

  private void setState(int state) {
      lastState = yystate();
      yybegin(state);
  }

  private void resetState() {
      yybegin(lastState);
  }

  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { setState(LINE);
    yypushback(yylength());
            }
          // fall through
          case 45: break;
          case 2:
            { setState(YYINITIAL); return COMMENT;
            }
          // fall through
          case 46: break;
          case 3:
            { setState(LINE);

    if (yytext().charAt(0) == recipePrefix) {
      return RECIPE_PREFIX;
    } else {
      yypushback(yylength());
    }
            }
          // fall through
          case 47: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 48: break;
          case 5:
            { return WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 6:
            { setState(YYINITIAL); return EOL;
            }
          // fall through
          case 50: break;
          case 7:
            { return CHARS;
            }
          // fall through
          case 51: break;
          case 8:
            { return DOLLAR;
            }
          // fall through
          case 52: break;
          case 9:
            { resetState(); return QUOTE;
            }
          // fall through
          case 53: break;
          case 10:
            { return OPEN_PAREN;
            }
          // fall through
          case 54: break;
          case 11:
            { return CLOSE_PAREN;
            }
          // fall through
          case 55: break;
          case 12:
            { return COMMA;
            }
          // fall through
          case 56: break;
          case 13:
            { return COLON;
            }
          // fall through
          case 57: break;
          case 14:
            { return SEMICOLON;
            }
          // fall through
          case 58: break;
          case 15:
            { return ASSIGN;
            }
          // fall through
          case 59: break;
          case 16:
            { return BACKTICK;
            }
          // fall through
          case 60: break;
          case 17:
            { return OPEN_CURLY;
            }
          // fall through
          case 61: break;
          case 18:
            { return PIPE;
            }
          // fall through
          case 62: break;
          case 19:
            { return CLOSE_CURLY;
            }
          // fall through
          case 63: break;
          case 20:
            { resetState(); return DOUBLEQUOTE;
            }
          // fall through
          case 64: break;
          case 21:
            { return EOL;
            }
          // fall through
          case 65: break;
          case 22:
            { setState(DQSTRING); return DOUBLEQUOTE;
            }
          // fall through
          case 66: break;
          case 23:
            { setState(SQSTRING); return QUOTE;
            }
          // fall through
          case 67: break;
          case 24:
            { setState(YYINITIAL); return DOC_COMMENT;
            }
          // fall through
          case 68: break;
          case 25:
            { return SPLIT;
            }
          // fall through
          case 69: break;
          case 26:
            { return ESCAPED_DOUBLEQUOTE;
            }
          // fall through
          case 70: break;
          case 27:
            { return FUNCTION_NAME;
            }
          // fall through
          case 71: break;
          case 28:
            { return MACRO;
            }
          // fall through
          case 72: break;
          case 29:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 73: break;
          case 30:
            { return KEYWORD_IFEQ;
            }
          // fall through
          case 74: break;
          case 31:
            { return KEYWORD_ENDIF;
            }
          // fall through
          case 75: break;
          case 32:
            { return KEYWORD_IFDEF;
            }
          // fall through
          case 76: break;
          case 33:
            { return KEYWORD_IFNEQ;
            }
          // fall through
          case 77: break;
          case 34:
            { return KEYWORD_VPATH;
            }
          // fall through
          case 78: break;
          case 35:
            { resetState(); return KEYWORD_ENDEF;
            }
          // fall through
          case 79: break;
          case 36:
            { return KEYWORD_EXPORT;
            }
          // fall through
          case 80: break;
          case 37:
            { return KEYWORD_IFNDEF;
            }
          // fall through
          case 81: break;
          case 38:
            { setState(DEFINE); return KEYWORD_DEFINE;
            }
          // fall through
          case 82: break;
          case 39:
            { return KEYWORD_INCLUDE;
            }
          // fall through
          case 83: break;
          case 40:
            { return KEYWORD_PRIVATE;
            }
          // fall through
          case 84: break;
          case 41:
            { return KEYWORD_OVERRIDE;
            }
          // fall through
          case 85: break;
          case 42:
            { return KEYWORD_UNDEFINE;
            }
          // fall through
          case 86: break;
          case 43:
            { return KEYWORD_UNEXPORT;
            }
          // fall through
          case 87: break;
          case 44:
            { setState(LINE);

    recipePrefix = getRecipePrefix(yytext().toString());
    yypushback(yylength());
            }
          // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
