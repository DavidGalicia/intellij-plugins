// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: MakefileLexer.flex

package com.jetbrains.lang.makefile;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.lang.makefile.psi.MakefileTypes;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.jetbrains.lang.makefile.psi.MakefileTypes.*;


public class _MakefileLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SQSTRING = 2;
  public static final int DQSTRING = 4;
  public static final int DEFINE = 6;
  public static final int LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  3,  4,  5,  6,  7,  8, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\4\1\5\1\6"+
    "\1\7\1\10\2\11\1\12\1\13\1\14\1\11\1\5"+
    "\1\15\1\16\1\17\13\11\1\20\1\21\1\11\1\22"+
    "\1\11\1\5\1\23\2\11\1\24\1\11\1\25\1\26"+
    "\2\11\1\27\6\11\1\30\1\11\1\31\5\11\1\32"+
    "\3\11\1\33\3\11\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\11\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\2\11\1\64\1\65\1\66"+
    "\1\11\6\0\1\3\32\0\1\67\11\0\1\11\12\0"+
    "\1\11\4\0\1\11\5\0\27\11\1\0\37\11\1\0"+
    "\u01ca\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0"+
    "\1\11\201\0\5\11\1\0\2\11\2\0\4\11\1\0"+
    "\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0"+
    "\24\11\1\0\123\11\1\0\213\11\10\0\246\11\1\0"+
    "\46\11\2\0\1\11\6\0\51\11\107\0\33\11\4\0"+
    "\4\11\55\0\53\11\43\0\2\11\1\0\143\11\1\0"+
    "\1\11\17\0\2\11\7\0\2\11\12\0\3\11\2\0"+
    "\1\11\20\0\1\11\1\0\36\11\35\0\131\11\13\0"+
    "\1\11\30\0\41\11\11\0\2\11\4\0\1\11\5\0"+
    "\26\11\4\0\1\11\11\0\1\11\3\0\1\11\27\0"+
    "\31\11\7\0\13\11\65\0\25\11\1\0\10\11\106\0"+
    "\66\11\3\0\1\11\22\0\1\11\7\0\12\11\17\0"+
    "\20\11\4\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\1\11\3\0\4\11\3\0\1\11\20\0"+
    "\1\11\15\0\2\11\1\0\3\11\16\0\2\11\12\0"+
    "\1\11\10\0\6\11\4\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\2\11\1\0\2\11\37\0"+
    "\4\11\1\0\1\11\23\0\3\11\20\0\11\11\1\0"+
    "\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0"+
    "\5\11\3\0\1\11\22\0\1\11\17\0\2\11\27\0"+
    "\1\11\13\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\2\11\1\0\5\11\3\0\1\11\36\0"+
    "\2\11\1\0\3\11\17\0\1\11\21\0\1\11\1\0"+
    "\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0"+
    "\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0"+
    "\14\11\26\0\1\11\64\0\10\11\1\0\3\11\1\0"+
    "\27\11\1\0\20\11\3\0\1\11\32\0\3\11\5\0"+
    "\2\11\36\0\1\11\4\0\10\11\1\0\3\11\1\0"+
    "\27\11\1\0\12\11\1\0\5\11\3\0\1\11\40\0"+
    "\1\11\1\0\2\11\17\0\2\11\22\0\10\11\1\0"+
    "\3\11\1\0\51\11\2\0\1\11\20\0\1\11\5\0"+
    "\3\11\10\0\3\11\30\0\6\11\5\0\22\11\3\0"+
    "\30\11\1\0\11\11\1\0\1\11\2\0\7\11\72\0"+
    "\60\11\1\0\2\11\14\0\7\11\72\0\2\11\1\0"+
    "\1\11\1\0\5\11\1\0\30\11\1\0\1\11\1\0"+
    "\12\11\1\0\2\11\11\0\1\11\2\0\5\11\1\0"+
    "\1\11\25\0\4\11\40\0\1\11\77\0\10\11\1\0"+
    "\44\11\33\0\5\11\163\0\53\11\24\0\1\11\20\0"+
    "\6\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0"+
    "\3\11\4\0\15\11\14\0\1\11\21\0\46\11\1\0"+
    "\1\11\5\0\1\11\2\0\53\11\1\0\115\11\1\0"+
    "\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0"+
    "\51\11\1\0\4\11\2\0\41\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\17\11\1\0"+
    "\71\11\1\0\4\11\2\0\103\11\45\0\20\11\20\0"+
    "\126\11\2\0\6\11\3\0\u016c\11\2\0\21\11\1\67"+
    "\32\11\5\0\113\11\6\0\10\11\7\0\15\11\1\0"+
    "\4\11\16\0\22\11\16\0\22\11\16\0\15\11\1\0"+
    "\3\11\17\0\64\11\43\0\1\11\4\0\1\11\103\0"+
    "\131\11\7\0\5\11\2\0\42\11\1\0\1\11\5\0"+
    "\106\11\12\0\37\11\61\0\36\11\2\0\5\11\13\0"+
    "\54\11\4\0\32\11\66\0\27\11\11\0\65\11\122\0"+
    "\1\11\135\0\57\11\21\0\7\11\67\0\36\11\15\0"+
    "\2\11\12\0\54\11\32\0\44\11\51\0\3\11\12\0"+
    "\44\11\2\0\11\11\7\0\53\11\2\0\3\11\51\0"+
    "\4\11\1\0\6\11\1\0\2\11\3\0\1\11\5\0"+
    "\300\11\100\0\26\11\2\0\6\11\2\0\46\11\2\0"+
    "\6\11\2\0\10\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0"+
    "\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0"+
    "\6\11\4\0\15\11\5\0\3\11\1\0\7\11\3\0"+
    "\13\67\35\0\2\3\5\0\1\67\57\0\1\67\21\0"+
    "\1\11\15\0\1\11\20\0\15\11\145\0\1\11\4\0"+
    "\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0"+
    "\13\11\2\0\4\11\5\0\5\11\4\0\1\11\64\0"+
    "\2\11\u017b\0\57\11\1\0\57\11\1\0\205\11\6\0"+
    "\4\11\3\0\2\11\14\0\46\11\1\0\1\11\5\0"+
    "\1\11\2\0\70\11\7\0\1\11\20\0\27\11\11\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\120\0"+
    "\1\11\320\0\1\67\4\0\2\11\52\0\5\11\5\0"+
    "\2\11\4\0\126\11\6\0\3\11\1\0\132\11\1\0"+
    "\4\11\5\0\53\11\1\0\136\11\21\0\33\11\65\0"+
    "\306\11\112\0\360\11\20\0\215\11\103\0\56\11\2\0"+
    "\15\11\3\0\20\11\12\0\2\11\24\0\57\11\20\0"+
    "\37\11\2\0\106\11\61\0\11\11\2\0\147\11\2\0"+
    "\65\11\2\0\5\11\60\0\13\11\1\0\3\11\1\0"+
    "\4\11\1\0\27\11\35\0\64\11\16\0\62\11\76\0"+
    "\6\11\3\0\1\11\1\0\2\11\13\0\34\11\12\0"+
    "\27\11\31\0\35\11\7\0\57\11\34\0\1\11\20\0"+
    "\5\11\1\0\12\11\12\0\5\11\1\0\51\11\27\0"+
    "\3\11\1\0\10\11\24\0\27\11\3\0\1\11\3\0"+
    "\62\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0"+
    "\1\11\1\0\1\11\30\0\3\11\2\0\13\11\7\0"+
    "\3\11\14\0\6\11\2\0\6\11\2\0\6\11\11\0"+
    "\7\11\1\0\7\11\1\0\53\11\1\0\14\11\10\0"+
    "\163\11\35\0\244\11\14\0\27\11\4\0\61\11\4\0"+
    "\u0100\70\156\11\2\0\152\11\46\0\7\11\14\0\5\11"+
    "\5\0\1\11\1\0\12\11\1\0\15\11\1\0\5\11"+
    "\1\0\1\11\1\0\2\11\1\0\2\11\1\0\154\11"+
    "\41\0\153\11\22\0\100\11\2\0\66\11\50\0\14\11"+
    "\164\0\5\11\1\0\207\11\44\0\32\11\6\0\32\11"+
    "\13\0\131\11\3\0\6\11\2\0\6\11\2\0\6\11"+
    "\2\0\3\11\43\0\14\11\1\0\32\11\1\0\23\11"+
    "\1\0\2\11\1\0\17\11\2\0\16\11\42\0\173\11"+
    "\205\0\35\11\3\0\61\11\57\0\40\11\15\0\24\11"+
    "\1\0\10\11\6\0\46\11\12\0\36\11\2\0\44\11"+
    "\4\0\10\11\60\0\236\11\22\0\44\11\4\0\44\11"+
    "\4\0\50\11\10\0\64\11\234\0\67\11\11\0\26\11"+
    "\12\0\10\11\230\0\6\11\2\0\1\11\1\0\54\11"+
    "\1\0\2\11\3\0\1\11\2\0\27\11\12\0\27\11"+
    "\11\0\37\11\101\0\23\11\1\0\2\11\12\0\26\11"+
    "\12\0\32\11\106\0\70\11\6\0\2\11\100\0\1\11"+
    "\17\0\4\11\1\0\3\11\1\0\35\11\52\0\35\11"+
    "\3\0\35\11\43\0\10\11\1\0\34\11\33\0\66\11"+
    "\12\0\26\11\12\0\23\11\15\0\22\11\156\0\111\11"+
    "\67\0\63\11\15\0\63\11\15\0\44\11\334\0\35\11"+
    "\12\0\1\11\10\0\26\11\232\0\27\11\14\0\65\11"+
    "\113\0\55\11\40\0\31\11\32\0\44\11\35\0\1\11"+
    "\13\0\43\11\3\0\1\11\14\0\60\11\16\0\4\11"+
    "\25\0\1\11\1\0\1\11\43\0\22\11\1\0\31\11"+
    "\124\0\7\11\1\0\1\11\1\0\4\11\1\0\17\11"+
    "\1\0\12\11\7\0\57\11\46\0\10\11\2\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\3\0\1\11\22\0\1\11\14\0\5\11\236\0\65\11"+
    "\22\0\4\11\24\0\1\11\40\0\60\11\24\0\2\11"+
    "\1\0\1\11\270\0\57\11\51\0\4\11\44\0\60\11"+
    "\24\0\1\11\73\0\53\11\15\0\1\11\107\0\33\11"+
    "\345\0\54\11\164\0\100\11\37\0\1\11\240\0\10\11"+
    "\2\0\47\11\20\0\1\11\1\0\1\11\34\0\1\11"+
    "\12\0\50\11\7\0\1\11\25\0\1\11\13\0\56\11"+
    "\23\0\1\11\42\0\71\11\7\0\11\11\1\0\45\11"+
    "\21\0\1\11\61\0\36\11\160\0\7\11\1\0\2\11"+
    "\1\0\46\11\25\0\1\11\31\0\6\11\1\0\2\11"+
    "\1\0\40\11\16\0\1\11\u0147\0\23\11\15\0\232\11"+
    "\346\0\304\11\274\0\57\11\321\0\107\11\271\0\71\11"+
    "\7\0\37\11\161\0\36\11\22\0\60\11\20\0\4\11"+
    "\37\0\25\11\5\0\23\11\260\0\100\11\200\0\113\11"+
    "\5\0\1\11\102\0\15\11\100\0\2\11\1\0\1\11"+
    "\34\0\370\11\10\0\363\11\15\0\37\11\61\0\3\11"+
    "\21\0\4\11\10\0\u018c\11\4\0\153\11\5\0\15\11"+
    "\3\0\11\11\7\0\12\11\146\0\125\11\1\0\107\11"+
    "\1\0\2\11\2\0\1\11\2\0\2\11\2\0\4\11"+
    "\1\0\14\11\1\0\1\11\1\0\7\11\1\0\101\11"+
    "\1\0\4\11\2\0\10\11\1\0\7\11\1\0\34\11"+
    "\1\0\4\11\1\0\5\11\1\0\1\11\3\0\7\11"+
    "\1\0\u0154\11\2\0\31\11\1\0\31\11\1\0\37\11"+
    "\1\0\31\11\1\0\37\11\1\0\31\11\1\0\37\11"+
    "\1\0\31\11\1\0\37\11\1\0\31\11\1\0\10\11"+
    "\64\0\55\11\12\0\7\11\20\0\1\11\u0171\0\54\11"+
    "\24\0\305\11\73\0\104\11\7\0\1\11\264\0\4\11"+
    "\1\0\33\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1\11"+
    "\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11"+
    "\1\0\4\11\1\0\4\11\1\0\1\11\1\0\12\11"+
    "\1\0\21\11\5\0\3\11\1\0\5\11\1\0\21\11"+
    "\104\0\327\11\51\0\65\11\13\0\336\11\2\0\u0182\11"+
    "\16\0\u0131\11\37\0\36\11\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\4\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\4\1\17\22\4\1\20\1\21\1\22"+
    "\4\23\1\6\30\23\1\24\2\4\1\25\2\4\1\26"+
    "\2\4\1\27\1\2\1\0\1\6\1\30\1\6\1\4"+
    "\1\0\1\31\1\32\17\4\1\33\4\4\1\33\16\4"+
    "\2\0\1\2\1\0\2\6\1\30\1\6\1\4\1\0"+
    "\1\4\1\0\2\4\1\0\1\30\3\4\1\33\43\4"+
    "\1\0\1\30\1\4\2\34\6\4\1\35\7\4\1\36"+
    "\16\4\1\33\1\0\7\4\1\37\4\4\1\40\1\4"+
    "\1\41\10\4\1\42\3\4\1\0\2\4\1\43\2\4"+
    "\1\44\1\33\1\4\1\45\7\4\1\0\1\4\1\46"+
    "\1\4\1\47\1\4\1\50\2\4\1\0\2\4\1\51"+
    "\1\52\1\53\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\2\0\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u023a\0\u023a\0\u0273\0\u02ac\0\u023a"+
    "\0\u02e5\0\u023a\0\u031e\0\u023a\0\u023a\0\u023a\0\u023a\0\u0357"+
    "\0\u0390\0\u023a\0\u023a\0\u03c9\0\u023a\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u023a"+
    "\0\u023a\0\u023a\0\u023a\0\u0804\0\u083d\0\u02ac\0\u0876\0\u031e"+
    "\0\u0357\0\u08af\0\u0390\0\u08e8\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u0921\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u023a"+
    "\0\u023a\0\u095a\0\u023a\0\u08e8\0\u0921\0\u023a\0\u0993\0\u09cc"+
    "\0\u023a\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u023a\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u0804\0\u1398\0\u083d"+
    "\0\u13d1\0\u140a\0\u023a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527"+
    "\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u031e\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u023a"+
    "\0\u031e\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u031e"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u031e"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u031e"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u031e\0\u2886\0\u031e\0\u28bf"+
    "\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u031e"+
    "\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u031e\0\u2bdd"+
    "\0\u2c16\0\u031e\0\u2c4f\0\u2c88\0\u031e\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u031e\0\u2ec2"+
    "\0\u031e\0\u2efb\0\u031e\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018"+
    "\0\u031e\0\u031e\0\u031e\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135"+
    "\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd"+
    "\0\u3336\0\u336f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\13\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\23"+
    "\1\31\1\32\1\33\10\23\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\23\1\45\1\46"+
    "\1\47\1\23\1\50\1\51\1\52\1\23\1\53\1\54"+
    "\1\23\1\55\1\56\1\57\1\23\1\60\1\61\1\62"+
    "\2\13\1\63\1\64\1\15\1\13\1\65\1\66\1\63"+
    "\1\67\1\63\1\70\4\63\1\71\1\72\1\73\2\63"+
    "\1\74\7\70\1\75\1\63\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\70\1\105\1\106\1\107\1\70"+
    "\1\110\1\111\1\112\1\70\1\113\1\114\1\70\1\115"+
    "\1\116\1\117\1\70\4\63\2\13\1\14\1\120\1\13"+
    "\1\16\1\17\1\121\1\122\1\22\1\23\1\123\1\25"+
    "\1\26\1\27\1\30\1\23\1\31\1\32\1\33\10\23"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\23\1\45\1\46\1\47\1\23\1\50\1\51"+
    "\1\52\1\23\1\53\1\54\1\23\1\55\1\56\1\57"+
    "\1\23\1\60\1\61\1\62\3\13\1\14\1\120\1\13"+
    "\1\16\1\17\1\121\1\122\1\22\1\23\1\123\1\25"+
    "\1\26\1\27\1\30\1\23\1\31\1\32\1\33\1\124"+
    "\7\23\1\34\1\35\1\36\1\37\1\40\1\125\1\42"+
    "\1\43\1\44\1\23\1\45\1\46\1\47\1\23\1\50"+
    "\1\51\1\52\1\23\1\53\1\54\1\23\1\55\1\56"+
    "\1\57\1\23\1\60\1\61\1\62\3\13\1\14\1\120"+
    "\1\13\1\16\1\17\1\126\1\122\1\22\1\23\1\121"+
    "\1\25\1\26\1\27\1\30\1\23\1\31\1\32\1\33"+
    "\10\23\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\23\1\45\1\46\1\47\1\23\1\50"+
    "\1\51\1\52\1\23\1\53\1\54\1\23\1\55\1\56"+
    "\1\57\1\23\1\60\1\61\1\62\3\13\1\14\1\120"+
    "\1\13\1\16\1\17\1\126\1\122\1\22\1\23\1\121"+
    "\1\25\1\26\1\27\1\30\1\23\1\31\1\32\1\33"+
    "\1\124\7\23\1\34\1\35\1\36\1\37\1\40\1\125"+
    "\1\42\1\43\1\44\1\23\1\45\1\46\1\47\1\23"+
    "\1\50\1\51\1\52\1\23\1\53\1\54\1\23\1\55"+
    "\1\56\1\57\1\23\1\60\1\61\1\62\3\13\1\14"+
    "\1\15\1\13\1\16\1\17\1\121\1\122\1\22\1\23"+
    "\1\121\1\25\1\26\1\27\2\23\1\31\1\32\1\33"+
    "\10\23\1\34\1\35\4\23\1\127\22\23\1\60\1\61"+
    "\1\62\3\13\1\14\1\15\1\13\1\16\1\17\1\121"+
    "\1\122\1\22\1\23\1\121\1\25\1\26\1\27\2\23"+
    "\1\31\1\32\1\33\1\130\7\23\1\34\1\35\4\23"+
    "\1\127\22\23\1\60\1\61\1\62\3\13\1\14\1\131"+
    "\1\13\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\23\1\31\1\32\1\33"+
    "\10\23\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\23\1\45\1\46\1\47\1\23\1\50"+
    "\1\51\1\52\1\23\1\53\1\54\1\23\1\55\1\56"+
    "\1\57\1\23\1\60\1\61\1\62\3\13\1\14\1\131"+
    "\1\13\1\132\1\17\1\20\1\67\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\23\1\31\1\32\1\33"+
    "\1\124\7\23\1\34\1\35\1\36\1\37\1\40\1\125"+
    "\1\42\1\43\1\44\1\23\1\45\1\46\1\47\1\23"+
    "\1\50\1\51\1\52\1\23\1\53\1\54\1\23\1\55"+
    "\1\56\1\57\1\23\1\60\1\61\1\62\2\13\75\0"+
    "\1\16\71\0\1\23\3\0\1\23\4\0\2\23\2\0"+
    "\1\33\10\23\1\133\1\0\27\23\5\0\2\134\1\0"+
    "\4\134\1\135\23\134\1\136\35\134\5\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\27\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\10\23\1\137\16\23\25\0\1\140\1\0"+
    "\1\33\50\0\1\141\3\0\1\142\1\23\3\0\2\23"+
    "\3\0\1\23\12\0\1\23\42\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\1\23\1\143"+
    "\1\23\1\144\10\23\1\145\12\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\1\146"+
    "\26\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\1\147\26\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\10\23"+
    "\1\150\16\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\12\23\1\151\1\23\1\152"+
    "\3\23\1\153\3\23\1\154\1\23\1\155\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\10\23\1\156\1\23\1\157\2\23\1\160\11\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\23\23\1\161\3\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\5\23\1\162"+
    "\6\23\1\163\12\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\15\23\1\164\11\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\1\165\26\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\15\23\1\166"+
    "\11\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\20\23\1\167\3\23\1\170\2\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\1\171\17\23\1\172\6\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\4\23\1\173\22\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\7\23\1\174\1\137"+
    "\4\23\1\175\4\23\1\176\1\177\3\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\14\23\1\200\12\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\1\201\15\23\1\202"+
    "\10\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\1\203\7\23\1\204\4\23\1\205"+
    "\11\23\6\0\1\206\2\0\1\206\12\0\1\207\52\0"+
    "\1\206\2\0\1\210\2\0\1\211\7\0\1\207\51\0"+
    "\2\212\1\213\4\212\1\214\23\212\1\215\35\212\5\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\6\23\1\216"+
    "\1\23\1\133\1\0\27\23\5\0\2\217\1\0\1\217"+
    "\1\0\1\220\3\217\1\220\4\217\2\220\3\217\1\23"+
    "\7\220\1\221\1\217\27\220\5\217\5\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\4\23"+
    "\1\222\3\23\1\150\16\23\14\0\1\122\66\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\14\23\1\223\12\23\5\0\2\217\1\0\1\217\1\0"+
    "\1\130\3\217\1\130\4\217\2\130\3\217\1\23\7\130"+
    "\1\224\1\217\27\130\5\217\4\0\1\132\2\0\1\211"+
    "\70\0\1\23\3\0\2\23\3\0\1\23\12\0\1\23"+
    "\35\0\2\134\1\0\30\134\1\136\35\134\2\135\1\0"+
    "\30\135\1\225\35\135\33\134\1\136\35\134\5\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\14\23\1\226\12\23\27\0\1\33\47\0\1\141\2\0"+
    "\1\141\71\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\21\23\1\227\5\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\3\23\1\230\23\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\3\23\1\231\23\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\21\23\1\232\5\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\12\23"+
    "\1\233\14\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\20\23\1\231\6\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\21\23\1\234\5\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\3\23\1\235"+
    "\23\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\20\23\1\236\6\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\1\233\26\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\16\23\1\237\10\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\12\23\1\240\1\23\1\241\3\23\1\165\6\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\1\242\26\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\20\23\1\243"+
    "\6\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\10\23\1\244\16\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\3\23\1\245\1\246\7\23\1\247\12\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\2\23\1\250\2\23\1\251\21\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\10\23"+
    "\1\252\16\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\21\23\1\253\5\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\22\23\1\254\4\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\10\23\1\255"+
    "\16\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\4\23\1\256\22\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\22\23\1\257\4\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\10\23\1\260\16\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\1\261\26\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\4\23\1\147"+
    "\22\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\20\23\1\262\6\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\20\23\1\263\6\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\1\23\1\264\3\23"+
    "\1\265\21\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\3\23\1\266\1\267\22\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\12\23\1\270\14\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\1\271"+
    "\26\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\20\23\1\272\6\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\12\23\1\273\14\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\20\23\1\274\6\23"+
    "\36\0\1\275\37\0\2\211\1\213\66\211\2\212\1\213"+
    "\30\212\1\215\35\212\2\214\1\213\30\214\1\276\35\214"+
    "\2\212\1\134\30\212\1\215\35\212\5\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\2\23\1\277\5\23\1\133"+
    "\1\0\27\23\5\0\2\217\1\0\1\217\1\0\16\217"+
    "\1\300\47\217\1\0\1\217\1\0\1\220\3\217\1\220"+
    "\4\217\2\220\3\217\1\301\7\220\1\221\1\217\27\220"+
    "\7\217\1\0\1\217\1\0\2\217\1\220\3\217\2\220"+
    "\3\217\1\220\2\217\1\300\7\217\1\220\35\217\5\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\5\23\1\302\21\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\3\23\1\303"+
    "\23\23\5\0\2\217\1\0\1\217\1\0\2\217\1\130"+
    "\3\217\2\130\3\217\1\130\2\217\1\300\7\217\1\130"+
    "\35\217\2\135\1\134\30\135\1\225\35\135\5\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\2\23\1\250\24\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\16\23\1\304\10\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\16\23\1\305\2\23\1\306\5\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\4\23\1\307\22\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\12\23\1\231"+
    "\14\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\4\23\1\310\22\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\10\23\1\311\16\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\15\23\1\150\11\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\15\23\1\312\11\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\4\23"+
    "\1\231\15\23\1\313\4\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\3\23\1\314"+
    "\23\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\24\23\1\236\2\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\4\23\1\315\22\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\12\23\1\316\14\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\4\23\1\317\22\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\17\23"+
    "\1\320\7\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\3\23\1\321\1\322\22\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\12\23\1\323\14\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\15\23"+
    "\1\231\11\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\14\23\1\231\12\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\22\23\1\324\4\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\3\23\1\41"+
    "\23\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\6\23\1\164\20\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\20\23\1\325\6\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\21\23\1\326\5\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\24\23\1\327\2\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\12\23"+
    "\1\227\14\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\22\23\1\231\4\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\10\23\1\330\16\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\21\23\1\262"+
    "\5\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\5\23\1\331\21\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\4\23\1\332\22\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\26\23\1\333\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\23\23\1\316\3\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\22\23\1\334"+
    "\4\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\14\23\1\335\12\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\3\23\1\336\23\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\3\23\1\337\23\23"+
    "\32\0\1\340\43\0\2\214\1\134\30\214\1\276\35\214"+
    "\5\0\1\23\3\0\1\23\4\0\2\23\3\0\1\23"+
    "\1\341\6\23\1\133\1\0\27\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\10\23"+
    "\1\342\16\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\4\23\1\343\22\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\1\344\26\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\20\23\1\345\6\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\23\23\1\346\3\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\14\23"+
    "\1\347\12\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\5\23\1\350\21\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\20\23\1\351\6\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\4\23\1\352"+
    "\22\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\21\23\1\353\5\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\1\354\26\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\4\23\1\231\22\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\5\23\1\355\21\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\4\23\1\356"+
    "\22\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\17\23\1\357\7\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\23\23\1\360\3\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\25\23\1\361\1\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\20\23\1\362\6\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\23\23"+
    "\1\363\3\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\1\364\26\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\16\23\1\231\10\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\10\23\1\365\16\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\5\23\1\366\21\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\16\23"+
    "\1\367\10\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\7\23\1\370\17\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\10\23\1\371\16\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\2\23\1\372"+
    "\24\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\12\23\1\373\6\23\1\231\5\23"+
    "\31\0\1\374\51\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\4\23\1\375\3\23\1\133\1\0\27\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\14\23\1\376\12\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\5\23\1\377"+
    "\21\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\22\23\1\u0100\4\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\4\23\1\265\22\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\5\23\1\265\21\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\1\u0101\26\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\22\23\1\u0102"+
    "\4\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\20\23\1\u0103\6\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\22\23\1\u0104\4\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\2\23\1\u0100\24\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\5\23\1\u0105\21\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\3\23"+
    "\1\u0106\23\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\15\23\1\u0107\11\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\10\23\1\u0108\16\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\1\23\1\264"+
    "\25\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\22\23\1\u0109\4\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\26\23\1\231\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\10\23\1\u010a\16\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\15\23\1\u010b\11\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\14\23\1\u010c"+
    "\12\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\1\u0107\26\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\10\23"+
    "\1\264\16\23\34\0\1\u010d\46\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\5\23\1\u010e\2\23\1\133\1\0"+
    "\27\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\4\23\1\u010f\22\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\7\23\1\231\17\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\13\23\1\316\13\23"+
    "\12\0\1\23\3\0\1\23\4\0\1\u0110\1\23\3\0"+
    "\10\23\1\133\1\0\27\23\12\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\10\23\1\133\1\0\20\23\1\335"+
    "\6\23\12\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\10\23\1\133\1\0\4\23\1\u0111\22\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\20\23\1\145\6\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\3\23\1\u0112\23\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\4\23\1\u0113\22\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\14\23"+
    "\1\u0114\12\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\20\23\1\u0115\6\23\12\0"+
    "\1\23\3\0\1\23\4\0\2\23\3\0\10\23\1\133"+
    "\1\0\6\23\1\231\20\23\35\0\1\u0116\45\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\2\23\1\u0117\5\23"+
    "\1\133\1\0\27\23\12\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\10\23\1\133\1\0\15\23\1\u0118\11\23"+
    "\12\0\1\23\3\0\1\23\4\0\2\23\3\0\10\23"+
    "\1\133\1\0\4\23\1\u0119\22\23\12\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\10\23\1\133\1\0\4\23"+
    "\1\u011a\22\23\12\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\10\23\1\133\1\0\22\23\1\u011b\4\23\32\0"+
    "\1\u011c\50\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\5\23\1\u011d\2\23\1\133\1\0\27\23\12\0\1\23"+
    "\3\0\1\23\4\0\2\23\3\0\10\23\1\133\1\0"+
    "\23\23\1\262\3\23\35\0\1\u011e\45\0\1\23\3\0"+
    "\1\23\4\0\2\23\3\0\6\23\1\u011f\1\23\1\133"+
    "\1\0\27\23\36\0\1\u0120\44\0\1\23\3\0\1\23"+
    "\4\0\2\23\3\0\2\23\1\u0121\5\23\1\133\1\0"+
    "\27\23\32\0\1\u0122\50\0\1\23\3\0\1\23\4\0"+
    "\2\23\3\0\3\23\1\u0123\4\23\1\133\1\0\27\23"+
    "\33\0\1\u0124\47\0\1\23\3\0\1\23\4\0\2\23"+
    "\3\0\4\23\1\u0125\3\23\1\133\1\0\27\23\34\0"+
    "\1\u0126\46\0\1\23\3\0\1\23\4\0\2\23\3\0"+
    "\7\23\1\u0127\1\133\1\0\27\23\37\0\1\u0128\37\0"+
    "\1\u0128\2\0\1\u0128\1\23\3\0\1\23\4\0\2\23"+
    "\2\0\1\u0129\10\23\1\133\1\0\27\23\6\0\1\u0128"+
    "\2\0\1\u0128\15\0\1\u0129\46\0\1\u012a\1\u0129\2\0"+
    "\1\u0129\62\u012a\1\0\2\u012a\4\0\62\u012a\1\0\1\u012a";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13224];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\3\11\2\1\1\11\1\1\1\11\1\1\4\11"+
    "\2\1\2\11\1\1\1\11\22\1\4\11\34\1\2\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\4\1\1\0\1\1\1\11\43\1\2\0\1\1\1\0"+
    "\1\1\1\11\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\50\1\1\0\2\1\1\11\37\1\1\0\33\1\1\0"+
    "\20\1\1\0\10\1\1\0\5\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private static char getRecipePrefix(String variable) {
    final var index = variable.indexOf('=');
    assert index != -1;

    final var value = variable.substring(index + 1, variable.length()).trim();
    if (value.startsWith("\\t")) {
      return '\t';
    }

    return value.charAt(0);
  }

  private char recipePrefix = '\t';

  private int lastState = YYINITIAL;

  private void setState(int state) {
      lastState = yystate();
      yybegin(state);
  }

  private void resetState() {
      yybegin(lastState);
  }

  public _MakefileLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MakefileLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 45: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 46: break;
          case 3:
            { return EOL;
            }
          // fall through
          case 47: break;
          case 4:
            { return CHARS;
            }
          // fall through
          case 48: break;
          case 5:
            { setState(DQSTRING); return DOUBLEQUOTE;
            }
          // fall through
          case 49: break;
          case 6:
            { return COMMENT;
            }
          // fall through
          case 50: break;
          case 7:
            { return DOLLAR;
            }
          // fall through
          case 51: break;
          case 8:
            { setState(SQSTRING); return QUOTE;
            }
          // fall through
          case 52: break;
          case 9:
            { return OPEN_PAREN;
            }
          // fall through
          case 53: break;
          case 10:
            { return CLOSE_PAREN;
            }
          // fall through
          case 54: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 55: break;
          case 12:
            { return COLON;
            }
          // fall through
          case 56: break;
          case 13:
            { return SEMICOLON;
            }
          // fall through
          case 57: break;
          case 14:
            { return ASSIGN;
            }
          // fall through
          case 58: break;
          case 15:
            { return BACKTICK;
            }
          // fall through
          case 59: break;
          case 16:
            { return OPEN_CURLY;
            }
          // fall through
          case 60: break;
          case 17:
            { return PIPE;
            }
          // fall through
          case 61: break;
          case 18:
            { return CLOSE_CURLY;
            }
          // fall through
          case 62: break;
          case 19:
            { if (yytext().charAt(0) == recipePrefix) {
      return RECIPE_PREFIX;
    } else {
      setState(LINE);
      yypushback(1);
    }
            }
          // fall through
          case 63: break;
          case 20:
            { resetState(); return EOL;
            }
          // fall through
          case 64: break;
          case 21:
            { resetState(); return QUOTE;
            }
          // fall through
          case 65: break;
          case 22:
            { resetState(); return DOUBLEQUOTE;
            }
          // fall through
          case 66: break;
          case 23:
            { setState(YYINITIAL); return EOL;
            }
          // fall through
          case 67: break;
          case 24:
            { return DOC_COMMENT;
            }
          // fall through
          case 68: break;
          case 25:
            { return SPLIT;
            }
          // fall through
          case 69: break;
          case 26:
            { return ESCAPED_DOUBLEQUOTE;
            }
          // fall through
          case 70: break;
          case 27:
            { return FUNCTION_NAME;
            }
          // fall through
          case 71: break;
          case 28:
            { return MACRO;
            }
          // fall through
          case 72: break;
          case 29:
            { return KEYWORD_ELSE;
            }
          // fall through
          case 73: break;
          case 30:
            { return KEYWORD_IFEQ;
            }
          // fall through
          case 74: break;
          case 31:
            { return KEYWORD_ENDIF;
            }
          // fall through
          case 75: break;
          case 32:
            { return KEYWORD_IFDEF;
            }
          // fall through
          case 76: break;
          case 33:
            { return KEYWORD_IFNEQ;
            }
          // fall through
          case 77: break;
          case 34:
            { return KEYWORD_VPATH;
            }
          // fall through
          case 78: break;
          case 35:
            { resetState(); return KEYWORD_ENDEF;
            }
          // fall through
          case 79: break;
          case 36:
            { return KEYWORD_EXPORT;
            }
          // fall through
          case 80: break;
          case 37:
            { return KEYWORD_IFNDEF;
            }
          // fall through
          case 81: break;
          case 38:
            { setState(DEFINE); return KEYWORD_DEFINE;
            }
          // fall through
          case 82: break;
          case 39:
            { return KEYWORD_INCLUDE;
            }
          // fall through
          case 83: break;
          case 40:
            { return KEYWORD_PRIVATE;
            }
          // fall through
          case 84: break;
          case 41:
            { return KEYWORD_OVERRIDE;
            }
          // fall through
          case 85: break;
          case 42:
            { return KEYWORD_UNDEFINE;
            }
          // fall through
          case 86: break;
          case 43:
            { return KEYWORD_UNEXPORT;
            }
          // fall through
          case 87: break;
          case 44:
            { recipePrefix = getRecipePrefix(yytext().toString());

    setState(LINE);
    yypushback(yylength());
            }
          // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
